s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.50)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 3
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.60)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 3
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#'''''''''''''''''''''''''Calculo de clusters
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.75)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 3
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#'''''''''''''''''''''''''Calculo de clusters
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.85)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 3
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#'''''''''''''''''''''''''Calculo de clusters
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.85)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 5
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.85)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 8
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#'''''''''''''''''''''''''Calculo de clusters
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.50)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 8
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#'''''''''''''''''''''''''Calculo de clusters
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.10)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 8
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
#'''''''''''''''''''''''''Calculo de clusters
#remover terminos esparcidos
tdmObama2 <- removeSparseTerms(matrizObama, sparse=0.85)
mObama2 <- as.matrix(tdmObama2)
#Vamos a hacer terminos traspuesto.
m3 <-mObama2
set.seed(122)
#vamos a elegir un numero de cluster razonables
#pueden ser 3 0 cuatro.
k <- 3
kmeansResult <- kmeans(m3, k)
kmeansResult
#Centro de los clusters
round(kmeansResult$centers, digits=3)
for(i in 1:k) {
cat(paste("cluster ", i, ": ", sep=""))
s <- sort(kmeansResult$centers[i,], decreasing=T)
cat(names(s)[1:3], "\n")
}
clusplot(m3, kmeansResult$cluster, color=TRUE, shade = TRUE, labels =2, lines =0)
head(m3)
matrizObama
head(matrizObama)
mg
View(mg)
View(dfObama)
View(dfObama)
View(dfGates)
#Ya tenemos a nuetra informacion apropiada para hacer esto. en forma de data frame.
#Primero, unimos todos lo corpus, que son dos:
obamagatesCorpus<-c(myCorpus , myCorpusg )
#Ahora, lo que hacemos es convertir la union del corpus a dtm
tododtm <- DocumentTermMatrix(obamagatesCorpus, control=list(minWordLenght=4, minDocFreq=5))
#ELiminamos aquello que es ralo y que no nos proporciona informacion relevante>
tododtm  <- removeSparseTerms(tododtm, 0.70)
tododtm  <- c(matrizgates, matrizObama)
tododtm  <- removeSparseTerms(tododtm, 0.70)
obamagatesCorpus<-c(myCorpus , myCorpusg )
tododtm  <- c(matrizgates, matrizObama)
tododtm  <- removeSparseTerms(tododtm, 0.70)
fix(tododtm)
tododtm  <- c(matrizgates, matrizObama)
tododtm  <- removeSparseTerms(tododtm, 0.20)
tododtm  <- c(matrizgates, matrizObama)
View(df)
tododtm  <- c(matrizgates, matrizObama)
tododtm  <- removeSparseTerms(tododtm, 0.50)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(inspect(tododtm))
rownames(muestras)<-1:nrow(tododtm)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(tododtm)
rownames(muestras)<-1:nrow(tododtm)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
View(muestras)
tododtm  <- c(matrizgates, matrizObama)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
tododtm  <- c(matrizgates, matrizObama)
tododtm  <- removeSparseTerms(tododtm, 0.80)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
tododtm  <- c(matrizgates, matrizObama)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
View(muestras)
View(muestras)
tododtm  <- c( matrizObama, matrizgates)
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
muestras[1,2916]
muestras[1,2917]
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.77)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.20)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.90)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.95)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
View(muestras)
muestras[1,158]
muestras[1,159]
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
muestras[1,159]
muestras[,159]
index <- sample(1:dim(muestras)[1])
# Getting the 75% of the data to train
OzTrain<-muestras[index[1:floor(3*dim(muestras)[1]/4)],]
OzTrainLabels<-as.matrix(OzTrain[,labCol, drop=FALSE])
OzTrain<-as.matrix(OzTrain[,-labCol])
muestras[1,159]
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
#Ahora, hacemos  eso de la prueba y entrenamiento.
finalcolumna<-159
NTRIALS <- 100
#Hacemos vectores que guarden lo de obama
TrueObama <-rep(0, NTRIALS)
FalseObama<-rep(0, NTRIALS)
TrueGates <-rep(0, NTRIALS)
FalseGates<-rep(0, NTRIALS)
i<-0
for(i in 1:NTRIALS)
{
# Obtaining a random sample from the original dataset
index <- sample(1:dim(muestras)[1])
#tres cuartas partes de los datos para entrenamiento.
Train<-muestras[index[1:floor(3*dim(muestras)[1]/4)],]
TrainLabels<-as.matrix(Train[,finalcolumna, drop=FALSE])
Train<-as.matrix(Train[,-finalcolumna])
#1 cuarta parte de los datos para pruebas.
Test <-muestras[index[((3*ceiling(dim(muestras)[1]/4)) + 1):dim(muestras)[1]],]
TestLabels<-as.factor(Test[,finalcolumna])
test<- as.matrix(Test[,-finalcolumna])
N<-length(TestLabels)
# Generamos una maquina de soporte vectorial.
svmClass<-ksvm(x=Train, y=TrainLabels,kernel="p",C=100, kpar=list(degree=1,offset=1), cross=3)
# Hacemos la prediccion para los datos de prueba.
TestResults<-predict(svmClass, test)
# List of positions of the real labels from the testing results
ObamaPositions    <- TestLabels=="Obama"
GatesPositions<- TestLabels=="Gates"
# List of positions of the real labels from the testing results
ObamaRate    <- TestResults[ObamaPositions]
GatesRate<- TestResults[GatesPositions]
# Getting the Baum rates
TrueObama[i] <- sum(ObamaRate=="Obama")/sum(ObamaPositions)
FalseObama[i]<- sum(ObamaRate=="Gates")/sum(ObamaPositions)
# Getting the Thompson rates
TrueGates[i] <- sum(GatesRate=="Gates")/sum(GatesPositions)
FalseGates[i]<- sum(GatesRate=="Obama")/sum(GatesPositions)
}
meanConfMatrix<-matrix(ncol=2, nrow=2)
meanConfMatrix[1,1]<-mean(TrueObama)
meanConfMatrix[1,2]<-mean(FalseObama)
meanConfMatrix[2,1]<-mean(FalseGates)
meanConfMatrix[2,2]<-mean(TrueGates)
rownames(meanConfMatrix)<-c("Obama", "Gates")
colnames(meanConfMatrix)<-c("Obama", "Gates")
print("Matriz promedio de confusion:")
print(meanConfMatrix*100)
muestras[1,159]
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
#Ahora, hacemos  eso de la prueba y entrenamiento.
finalcolumna<-159
NTRIALS <- 100
#Hacemos vectores que guarden lo de obama
TrueObama <-rep(0, NTRIALS)
FalseObama<-rep(0, NTRIALS)
TrueGates <-rep(0, NTRIALS)
FalseGates<-rep(0, NTRIALS)
i<-0
for(i in 1:NTRIALS)
{
# Obtaining a random sample from the original dataset
index <- sample(1:dim(muestras)[1])
#tres cuartas partes de los datos para entrenamiento.
Train<-muestras[index[1:floor(3*dim(muestras)[1]/4)],]
TrainLabels<-as.matrix(Train[,finalcolumna, drop=FALSE])
Train<-as.matrix(Train[,-finalcolumna])
#1 cuarta parte de los datos para pruebas.
Test <-muestras[index[((3*ceiling(dim(muestras)[1]/4)) + 1):dim(muestras)[1]],]
TestLabels<-as.factor(Test[,finalcolumna])
test<- as.matrix(Test[,-finalcolumna])
N<-length(TestLabels)
# Generamos una maquina de soporte vectorial.
svmClass<-ksvm(x=Train, y=TrainLabels,kernel="p",C=100, kpar=list(degree=1,offset=1), cross=3)
# Hacemos la prediccion para los datos de prueba.
TestResults<-predict(svmClass, test)
# List of positions of the real labels from the testing results
ObamaPositions    <- TestLabels=="Obama"
GatesPositions<- TestLabels=="Gates"
# List of positions of the real labels from the testing results
ObamaRate    <- TestResults[ObamaPositions]
GatesRate<- TestResults[GatesPositions]
# Getting the Baum rates
TrueObama[i] <- sum(ObamaRate=="Obama")/sum(ObamaPositions)
FalseObama[i]<- sum(ObamaRate=="Gates")/sum(ObamaPositions)
# Getting the Thompson rates
TrueGates[i] <- sum(GatesRate=="Gates")/sum(GatesPositions)
FalseGates[i]<- sum(GatesRate=="Obama")/sum(GatesPositions)
}
meanConfMatrix<-matrix(ncol=2, nrow=2)
meanConfMatrix[1,1]<-mean(TrueObama)
meanConfMatrix[1,2]<-mean(FalseObama)
meanConfMatrix[2,1]<-mean(FalseGates)
meanConfMatrix[2,2]<-mean(TrueGates)
rownames(meanConfMatrix)<-c("Obama", "Gates")
colnames(meanConfMatrix)<-c("Obama", "Gates")
print("Matriz promedio de confusion:")
print(meanConfMatrix*100)
library(kernlab)
install.packages("kernlab")
library(kernlab)
library(kernlab)
library(kernlab)
library(kernlab)
library(kernlab)
install.packages("kernlab")
library(kernlab)
install.packages("kernlab")
library(kernlab)
svmClass<-ksvm(x=Train, y=TrainLabels,kernel="p",C=100, kpar=list(degree=1,offset=1), cross=3)
library("kernlab")
install.packages(kernlab)
install.packages("kernlab")
install.packages(kernlab)
install.packages('e1071')
library('e1071')
library(e1071)
library(e1071)
library(kernlab)
install.packages("kernlab")
install.packages("igraph")
library(igraph)
library(igraph)
install.packages("kernlab")
library(kernlab)
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
#GUardamos esta cosa, porque no me deja hacer nada en linux mejor me voy a windows.
save(muestras,file="C:/Users/Toshiba/Dropbox/segundoSemestre/RecEstadistidoDePatrones/TareaFinal/muestras.Rdata")
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
#GUardamos esta cosa, porque no me deja hacer nada en linux mejor me voy a windows.
save(muestras,"C:/Users/Toshiba/Dropbox/segundoSemestre/RecEstadistidoDePatrones/TareaFinal/muestras.Rdata")
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
#GUardamos esta cosa, porque no me deja hacer nada en linux mejor me voy a windows.
save(muestras,"/home/daniel/Dropbox/segundoSemestre/RecEstadistidoDePatrones/TareaFinal/muestras.Rdata")
tododtm  <- c( matrizObama, matrizgates)
############################################
tododtm  <- removeSparseTerms(tododtm, 0.99)
#####################################
# Preparamos los datos para el entrenamiento:
muestras<-as.data.frame(as.matrix(tododtm))
rownames(muestras)<-1:nrow(tododtm)
#Agregamos etiqueta de la clase a la que pertenecen:
cLabels <- c(rep("Obama",788), rep("Gates",757))
muestras<-cbind(muestras, cLabels)
#GUardamos esta cosa, porque no me deja hacer nada en linux mejor me voy a windows.
save(muestras,file ="/home/daniel/Dropbox/segundoSemestre/RecEstadistidoDePatrones/TareaFinal/muestras.Rdata")
x= [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
library(ggplot2)
#indicamos la ruta donde se encuentra el archivo.
setwd("/home/daniel/Dropbox/mis documentos/MateriasCimatTomadas/4toSemestre/tesisproyecto/progCryptografia/RenyisImagenesCodigosImportantes/HistogramaMapaCaoticoRenyi")
frecuencia<-read.table("graficar.dat")
plot( frecuencia$V1, frecuencia$V2, type = "h", xlab = "Particiones", ylab = "Frecuencia",  ylim=c(0,15000),
main = "Frecuencia de valores del mapa Renyi")
library(ggplot2)
#indicamos la ruta donde se encuentra el archivo.
setwd("/home/daniel/Dropbox/mis documentos/MateriasCimatTomadas/4toSemestre/tesisproyecto/progCryptografia/RenyiMapsBuenos")
frecuencia<-read.table("graficar.dat")
plot( frecuencia$V1, frecuencia$V2, type = "h", xlab = "Particiones", ylab = "Frecuencia",  ylim=c(0,15000),
main = "Frecuencia de valores")
library(ggplot2)
#indicamos la ruta donde se encuentra el archivo.
setwd("/home/daniel/Dropbox/mis documentos/MateriasCimatTomadas/4toSemestre/tesisproyecto/progCryptografia/RenyisImagenesCodigosImportantes/HistogramaMapaCaoticoRenyi")
frecuencia<-read.table("graficar.dat")
plot( frecuencia$V1, frecuencia$V2, type = "h", xlab = "Particiones", ylab = "Frecuencia",  ylim=c(0,15000),
main = "Frecuencia de valores del mapa Renyi")
