#include <stdio.h>
#include <stdlib.h>
#include <math.h>


#define RENYI_MAP(var, parametro, j) ((var)*(parametro)+((var)>>(j)))
#define  MAX 4294967295 /*El valor de 2^32-1.*/
#define TAMANIOCICLO 4294967296 /*EL valor de 2^32.*/
#define noMapas  /*NUmero de mapas a utilizar.*/
#define ITtotales 80000 /*Iteraciones totales para NIST.*/
#define tamanioH 20000 /*Tamanio del arreglo de H.*/

/*
 File:   main.c
 Author: daniel
 Programa tesis.
 Se utilizan los mapas caoticos Renyi para hacer esto.
*/



/*Prototipos de funciones para caca procedimiento.*/
void calcularNumeroClave(unsigned int *, unsigned int *);
void inicializarMapas(unsigned long **, unsigned int );
void inicializarParametros(unsigned long **, unsigned int); 
void invertirBits(); 
void permutarArreglo();

int main(){
 
   
   /*Declaramos los arreglos que vamos a utilizar para guardar esto.*/
   unsigned long Xn[noMapas];
   unsigned long Xtotal[ITtotales]; 
   unsigned long parametros[noMapas];
   unsigned long arregloH[tamanioH];
   unsigned int i;
   unsigned int epsilon;
   unsigned long gamma;
   unsigned long gammaComp;
   FILE *  archivobin; 
   FILE *  archivoH;
   
   unsigned long H=0; 
   unsigned int j=9; /*No mas de 16.*/
   unsigned long iteraciones=0;
   unsigned long IT = 80000;

  /* Apertura del fichero de destino, para escritura en binario.*/
   archivobin = fopen ("binarioXORcomp.dat", "wb");
   if (archivobin==NULL)
   {
   perror("No se puede abrir binarioXORcomp.dat");
   return -1;
   }
   
   /* Apertura del archivo H para su escritura en binario.*/
   archivoH = fopen ("HdeXORcomp.dat", "wb");
   if (archivoH==NULL)
   {
   perror("No se puede abrir HdeXORcomp.dat");
   return -1;
   }

 
   ////////////////Aqui hago llamadas de los metodos/////////////////
   //Llamo al metodo que calcula el numero de claves.
   //Llamo al metodo de inicializar los mapas.
   //Llamo al metodo de inicializar parametros.
   //////////////////////////////////////////////////////////////////
   
   

   /*Inicializamos nuestros parametros, en este punto se aplica el uso
    *de una llave, en este ejemplo todavia no elegimos una. Tambien,
    *los parametros son fijos en este ejemplo.*/
   parametros[0]=131071;
   Xn[0]=653;
   parametros[1]=104729;
   Xn[1]=769;
   parametros[2]=524287;
   Xn[2]=227;
   parametros[3]=65537;
   Xn[3]=823;
   int contDeH=0;
                   
   /*Primero, hacemos un ciclo inicial para calcular un nuevo valor para cada
   uno de los mapas y calcular, por primera vez, el resultado de la operacion
   XOR.*/
   for( i =0; i<noMapas; i++){
       Xn[i]= RENYI_MAP(Xn[i],parametros[i],j);
       H^=Xn[i];
   }
   
   arregloH[contDeH]=H; 
   contDeH++;
 
   /*Elegimos un epsilon aleatorio entre 1 y 16 (para operaciones de 32 bits).
   En este caso, elegimos uno que este entre 0 y 15.*/
   epsilon = 5;   
  
   gamma= pow(2,epsilon);
   gamma-=1;
   gammaComp= MAX-gamma;
    
   unsigned int k;
   unsigned long newH;

   do {
        
        newH = 0;
        for(k=0;k<noMapas; k++){            
            Xn[k]= gammaComp^RENYI_MAP(Xn[k],parametros[k],j)+ gamma^H;
            Xtotal[iteraciones++] = Xn[k];
            newH^=Xn[k];      
        }
        H = newH;
        arregloH[contDeH]=H;
        printf("\nla iteracion %d  para  %lu H es:  \n", contDeH,arregloH[contDeH] );
        contDeH++;
        /*Ahora, elegimos un valor para epsilon entre 1 y 8 bits.*/
        epsilon = (H % 8) + 1;  

   } while (iteraciones < IT);
 

   /*Escribimos la informacion.*/
   fwrite(Xtotal,4,80000,archivobin); 
   fwrite(arregloH,4,20000,archivoH); 

   if(!fclose(archivobin)){
      printf( "\nArchivo binario cerrado\n" );
   }
   else{
      printf( "\nError: Archivo binario no cerrado \n" );
      return 1;
   }  

   if(!fclose(archivoH)){
     printf( "\nArchivo binario DE H cerrado\n" );
   }
   else{
      printf( "\nError: Archivo binario DE H no cerrado \n" );
      return 1;
   }
   

return 0;
}



    /*===============================================================*/
    void calcularNumeroClave(unsigned int * N, unsigned int * MAX_B){

    /*Primero, debemos de calcular el numero de mapas que se van a 
      acoplar, para eso, utilizamos la siguiente tabla: */
    /*
     KEY_LENGTH(BITS)      MIN_NUM_MAP(MIN_B)       MAX_NUM_MAP(MAX_B)
          128                     8                         16
          256                     8                         25
          512                     16                        32
    */
    
	    /*Calculo de KS*/
	    unsigned int KS =0;
            /*====Aqui falta calcular esta cosa====*/
	    
	    /*Calculo de N*/    
	    *N= KS % (*MAX_B+1);
    }
    /*===============================================================*/




    /*===============================================================*/
    void inicializarMapas(unsigned long ** Xn, unsigned int N){     

    }
    /*===============================================================*/




    /*===============================================================*/
    void inicializarParametros(unsigned long ** parametros, unsigned int N){
     
    } 
    /*===============================================================*/





    /*===============================================================*/
    void invertirBits(){
       /*Hasta el momento, solo hago la inicializacion como dice el articulo.
         Por lo tanto, todavia no esta bien.*/
       BF = f*Av*MEPL;
       unsigned int i;
       for(i=0; i<((Ps*8)/BF);  i++ ){
           Bi = (rnd(ceil(/*logBase2(BF)*/)) * BF)+1;
           loc = i*(BF);
           invertir(P[Bi +loc]);
       }

    }
    /*===============================================================*/



    /*===============================================================*/
    void permutarArreglo(){
    /*Este es el paso de shuffling.
      L es el numero de segmentos en que se divide el arreglo.
      */
    

    }
    /*===============================================================*/
