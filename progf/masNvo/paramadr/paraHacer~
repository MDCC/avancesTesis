for(irtp=0; irtp < numPaquetesRTP; irtp++){

                /*========= Proceso de Inversion de bits ==========================*/
	        bitRef=0;	
	        epsilon = (H & 15);
	
                while((bitRef+BF)<numBitsRTP){

			newH=0;
			Xn[0]= RENYI_MAP(Xn[0],parametros[0],j)+ (epsilon*H);
			newH^=Xn[0]; 
                        Xn[1]= RENYI_MAP(Xn[1],parametros[1],j)+ (epsilon*H);
			newH^=Xn[1]; 
			Xn[2]= RENYI_MAP(Xn[2],parametros[2],j)+ (epsilon*H);
			newH^=Xn[2]; 
			Xn[3]= RENYI_MAP(Xn[3],parametros[3],j)+ (epsilon*H);
			newH^=Xn[3]; 
			H = newH&255;


			for( count=0; (count < 16)&&((bitRef+BF) < numBitsRTP); ) { 
                           
		                p=( prtXn[count]  % (BF-2)  ) + 1;
				
				bitRef+=p;
                                count++;  
				/*Si un numero aleatorio es impar...*/
				if(p&1){  
		                	posicionInversion = bitRef+( prtXn[count]  % (BF-p));                                                       
				}
				/*Si el un numero aleatorio es par...*/
				else{
		                	posicionInversion = bitRef-( prtXn[count]  % p);			
				}

		                datosAuxiliar[posicionInversion>>3]^=flip[posicionInversion & 7];    
		                count++;  
                            
			}


                }/*Fin del ciclo while para inversion de bits en el segmento.*/

		
                      
		/*========= Proceso de Permutacion ========================================*/
		/*Primero, iniciamos el arreglo referencia.*/	
                segmentos[0]=0;       segmentos[1]=1;   segmentos[2]=2;   segmentos[3]=3; 
                segmentos[4]=4;       segmentos[5]=5;   segmentos[6]=6;   segmentos[7]=7; 
                segmentos[8]=8;       segmentos[9]=9;   segmentos[10]=10; segmentos[11]=11; 
                segmentos[12]=12;     segmentos[13]=13; segmentos[14]=14; segmentos[15]=15; 
                segmentos[16]=16;     segmentos[17]=17; segmentos[18]=18; segmentos[19]=19; 
	       	
                /*limite se utiliza para ahorrar restas en el ciclo.*/
                limite=NUMSEGMENTOS-1;
                /*El ciclo realiza lo que dice al paper: aplicar intercambio hasta el
                segundo elemento, el primero no tiene caso porque no 
		tiene con quien intercambiarse.*/
           for(iSeg =limite-1;iSeg > 0; iSeg--) {
       
			X = RENYI_MAP(H,parametroShuffling1,jShuffling1);
			Y = RENYI_MAP(H,parametroShuffling2,jShuffling2);
                
                
			T =  (prtX & prtY) % (iSeg);

		     auxiliar = segmentos[iSeg];  // segmentos hacer unsigned char
			segmentos[iSeg] = segmentos[T];
			segmentos[T] = auxiliar;
            }  
    
		}/*Fin del for que recorre los segmentos del paquete RTP.*/

           // llenar pkt
           for(count = 0;count < limite;count++) {
                /*Ahora se hace intercambio con el valor del ultimo elemento.*/
			memcpy(datosPkt[count],datosAuxiliares[segmento[count]]);
                datosAuxiliares[segmento[count]]) += tamRTP; 
		 } 
      
  
	}/*Fin del ciclo de paquetes RTP.*/
	/***********************************************************************************/


     p2    =  intercambioArreglo;
              for(iSeg=0; iSeg<NUMSEGMENTOS; iSeg++){

                        p1 =datosAuxiliar + tamanioSegmento*segmentos[iSeg];
			p2  += tamanioSegmento;
   
			memcpy(p2,p1, tamanioSegmento);
		   
		}/*Fin del for para la permutacion de segmentos*/
                
                


